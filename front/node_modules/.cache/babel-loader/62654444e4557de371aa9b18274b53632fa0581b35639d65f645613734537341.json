{"ast":null,"code":"import { SelectorType, AttributeAction } from \"./types\";\nconst reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nconst reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nconst actionTypes = new Map([[126 /* Tilde */, AttributeAction.Element], [94 /* Circumflex */, AttributeAction.Start], [36 /* Dollar */, AttributeAction.End], [42 /* Asterisk */, AttributeAction.Any], [33 /* ExclamationMark */, AttributeAction.Not], [124 /* Pipe */, AttributeAction.Hyphen]]);\n// Pseudos, whose data property is parsed as well.\nconst unpackPseudos = new Set([\"has\", \"not\", \"matches\", \"is\", \"where\", \"host\", \"host-context\"]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */\nexport function isTraversal(selector) {\n  switch (selector.type) {\n    case SelectorType.Adjacent:\n    case SelectorType.Child:\n    case SelectorType.Descendant:\n    case SelectorType.Parent:\n    case SelectorType.Sibling:\n    case SelectorType.ColumnCombinator:\n      return true;\n    default:\n      return false;\n  }\n}\nconst stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n  const high = parseInt(escaped, 16) - 0x10000;\n  // NaN means non-codepoint\n  return high !== high || escapedWhitespace ? escaped : high < 0 ?\n  // BMP codepoint\n  String.fromCharCode(high + 0x10000) :\n  // Supplemental Plane codepoint (surrogate pair)\n  String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);\n}\nfunction unescapeCSS(str) {\n  return str.replace(reEscape, funescape);\n}\nfunction isQuote(c) {\n  return c === 39 /* SingleQuote */ || c === 34 /* DoubleQuote */;\n}\nfunction isWhitespace(c) {\n  return c === 32 /* Space */ || c === 9 /* Tab */ || c === 10 /* NewLine */ || c === 12 /* FormFeed */ || c === 13 /* CarriageReturn */;\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */\nexport function parse(selector) {\n  const subselects = [];\n  const endIndex = parseSelector(subselects, \"\".concat(selector), 0);\n  if (endIndex < selector.length) {\n    throw new Error(\"Unmatched selector: \".concat(selector.slice(endIndex)));\n  }\n  return subselects;\n}\nfunction parseSelector(subselects, selector, selectorIndex) {\n  let tokens = [];\n  function getName(offset) {\n    const match = selector.slice(selectorIndex + offset).match(reName);\n    if (!match) {\n      throw new Error(\"Expected name, found \".concat(selector.slice(selectorIndex)));\n    }\n    const [name] = match;\n    selectorIndex += offset + name.length;\n    return unescapeCSS(name);\n  }\n  function stripWhitespace(offset) {\n    selectorIndex += offset;\n    while (selectorIndex < selector.length && isWhitespace(selector.charCodeAt(selectorIndex))) {\n      selectorIndex++;\n    }\n  }\n  function readValueWithParenthesis() {\n    selectorIndex += 1;\n    const start = selectorIndex;\n    let counter = 1;\n    for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {\n      if (selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */ && !isEscaped(selectorIndex)) {\n        counter++;\n      } else if (selector.charCodeAt(selectorIndex) === 41 /* RightParenthesis */ && !isEscaped(selectorIndex)) {\n        counter--;\n      }\n    }\n    if (counter) {\n      throw new Error(\"Parenthesis not matched\");\n    }\n    return unescapeCSS(selector.slice(start, selectorIndex - 1));\n  }\n  function isEscaped(pos) {\n    let slashCount = 0;\n    while (selector.charCodeAt(--pos) === 92 /* BackSlash */) slashCount++;\n    return (slashCount & 1) === 1;\n  }\n  function ensureNotTraversal() {\n    if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n      throw new Error(\"Did not expect successive traversals.\");\n    }\n  }\n  function addTraversal(type) {\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === SelectorType.Descendant) {\n      tokens[tokens.length - 1].type = type;\n      return;\n    }\n    ensureNotTraversal();\n    tokens.push({\n      type\n    });\n  }\n  function addSpecialAttribute(name, action) {\n    tokens.push({\n      type: SelectorType.Attribute,\n      name,\n      action,\n      value: getName(1),\n      namespace: null,\n      ignoreCase: \"quirks\"\n    });\n  }\n  /**\n   * We have finished parsing the current part of the selector.\n   *\n   * Remove descendant tokens at the end if they exist,\n   * and return the last index, so that parsing can be\n   * picked up from here.\n   */\n  function finalizeSubselector() {\n    if (tokens.length && tokens[tokens.length - 1].type === SelectorType.Descendant) {\n      tokens.pop();\n    }\n    if (tokens.length === 0) {\n      throw new Error(\"Empty sub-selector\");\n    }\n    subselects.push(tokens);\n  }\n  stripWhitespace(0);\n  if (selector.length === selectorIndex) {\n    return selectorIndex;\n  }\n  loop: while (selectorIndex < selector.length) {\n    const firstChar = selector.charCodeAt(selectorIndex);\n    switch (firstChar) {\n      // Whitespace\n      case 32 /* Space */:\n      case 9 /* Tab */:\n      case 10 /* NewLine */:\n      case 12 /* FormFeed */:\n      case 13 /* CarriageReturn */:\n        {\n          if (tokens.length === 0 || tokens[0].type !== SelectorType.Descendant) {\n            ensureNotTraversal();\n            tokens.push({\n              type: SelectorType.Descendant\n            });\n          }\n          stripWhitespace(1);\n          break;\n        }\n      // Traversals\n      case 62 /* GreaterThan */:\n        {\n          addTraversal(SelectorType.Child);\n          stripWhitespace(1);\n          break;\n        }\n      case 60 /* LessThan */:\n        {\n          addTraversal(SelectorType.Parent);\n          stripWhitespace(1);\n          break;\n        }\n      case 126 /* Tilde */:\n        {\n          addTraversal(SelectorType.Sibling);\n          stripWhitespace(1);\n          break;\n        }\n      case 43 /* Plus */:\n        {\n          addTraversal(SelectorType.Adjacent);\n          stripWhitespace(1);\n          break;\n        }\n      // Special attribute selectors: .class, #id\n      case 46 /* Period */:\n        {\n          addSpecialAttribute(\"class\", AttributeAction.Element);\n          break;\n        }\n      case 35 /* Hash */:\n        {\n          addSpecialAttribute(\"id\", AttributeAction.Equals);\n          break;\n        }\n      case 91 /* LeftSquareBracket */:\n        {\n          stripWhitespace(1);\n          // Determine attribute name and namespace\n          let name;\n          let namespace = null;\n          if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */) {\n            // Equivalent to no namespace\n            name = getName(1);\n          } else if (selector.startsWith(\"*|\", selectorIndex)) {\n            namespace = \"*\";\n            name = getName(2);\n          } else {\n            name = getName(0);\n            if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ && selector.charCodeAt(selectorIndex + 1) !== 61 /* Equal */) {\n              namespace = name;\n              name = getName(1);\n            }\n          }\n          stripWhitespace(0);\n          // Determine comparison operation\n          let action = AttributeAction.Exists;\n          const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n          if (possibleAction) {\n            action = possibleAction;\n            if (selector.charCodeAt(selectorIndex + 1) !== 61 /* Equal */) {\n              throw new Error(\"Expected `=`\");\n            }\n            stripWhitespace(2);\n          } else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */) {\n            action = AttributeAction.Equals;\n            stripWhitespace(1);\n          }\n          // Determine value\n          let value = \"\";\n          let ignoreCase = null;\n          if (action !== \"exists\") {\n            if (isQuote(selector.charCodeAt(selectorIndex))) {\n              const quote = selector.charCodeAt(selectorIndex);\n              let sectionEnd = selectorIndex + 1;\n              while (sectionEnd < selector.length && (selector.charCodeAt(sectionEnd) !== quote || isEscaped(sectionEnd))) {\n                sectionEnd += 1;\n              }\n              if (selector.charCodeAt(sectionEnd) !== quote) {\n                throw new Error(\"Attribute value didn't end\");\n              }\n              value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n              selectorIndex = sectionEnd + 1;\n            } else {\n              const valueStart = selectorIndex;\n              while (selectorIndex < selector.length && (!isWhitespace(selector.charCodeAt(selectorIndex)) && selector.charCodeAt(selectorIndex) !== 93 /* RightSquareBracket */ || isEscaped(selectorIndex))) {\n                selectorIndex += 1;\n              }\n              value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n            }\n            stripWhitespace(0);\n            // See if we have a force ignore flag\n            const forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;\n            // If the forceIgnore flag is set (either `i` or `s`), use that value\n            if (forceIgnore === 115 /* LowerS */) {\n              ignoreCase = false;\n              stripWhitespace(1);\n            } else if (forceIgnore === 105 /* LowerI */) {\n              ignoreCase = true;\n              stripWhitespace(1);\n            }\n          }\n          if (selector.charCodeAt(selectorIndex) !== 93 /* RightSquareBracket */) {\n            throw new Error(\"Attribute selector didn't terminate\");\n          }\n          selectorIndex += 1;\n          const attributeSelector = {\n            type: SelectorType.Attribute,\n            name,\n            action,\n            value,\n            namespace,\n            ignoreCase\n          };\n          tokens.push(attributeSelector);\n          break;\n        }\n      case 58 /* Colon */:\n        {\n          if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */) {\n            tokens.push({\n              type: SelectorType.PseudoElement,\n              name: getName(2).toLowerCase(),\n              data: selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */ ? readValueWithParenthesis() : null\n            });\n            continue;\n          }\n          const name = getName(1).toLowerCase();\n          let data = null;\n          if (selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */) {\n            if (unpackPseudos.has(name)) {\n              if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                throw new Error(\"Pseudo-selector \".concat(name, \" cannot be quoted\"));\n              }\n              data = [];\n              selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n              if (selector.charCodeAt(selectorIndex) !== 41 /* RightParenthesis */) {\n                throw new Error(\"Missing closing parenthesis in :\".concat(name, \" (\").concat(selector, \")\"));\n              }\n              selectorIndex += 1;\n            } else {\n              data = readValueWithParenthesis();\n              if (stripQuotesFromPseudos.has(name)) {\n                const quot = data.charCodeAt(0);\n                if (quot === data.charCodeAt(data.length - 1) && isQuote(quot)) {\n                  data = data.slice(1, -1);\n                }\n              }\n              data = unescapeCSS(data);\n            }\n          }\n          tokens.push({\n            type: SelectorType.Pseudo,\n            name,\n            data\n          });\n          break;\n        }\n      case 44 /* Comma */:\n        {\n          finalizeSubselector();\n          tokens = [];\n          stripWhitespace(1);\n          break;\n        }\n      default:\n        {\n          if (selector.startsWith(\"/*\", selectorIndex)) {\n            const endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n            if (endIndex < 0) {\n              throw new Error(\"Comment was not terminated\");\n            }\n            selectorIndex = endIndex + 2;\n            // Remove leading whitespace\n            if (tokens.length === 0) {\n              stripWhitespace(0);\n            }\n            break;\n          }\n          let namespace = null;\n          let name;\n          if (firstChar === 42 /* Asterisk */) {\n            selectorIndex += 1;\n            name = \"*\";\n          } else if (firstChar === 124 /* Pipe */) {\n            name = \"\";\n            if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */) {\n              addTraversal(SelectorType.ColumnCombinator);\n              stripWhitespace(2);\n              break;\n            }\n          } else if (reName.test(selector.slice(selectorIndex))) {\n            name = getName(0);\n          } else {\n            break loop;\n          }\n          if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ && selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */) {\n            namespace = name;\n            if (selector.charCodeAt(selectorIndex + 1) === 42 /* Asterisk */) {\n              name = \"*\";\n              selectorIndex += 2;\n            } else {\n              name = getName(1);\n            }\n          }\n          tokens.push(name === \"*\" ? {\n            type: SelectorType.Universal,\n            namespace\n          } : {\n            type: SelectorType.Tag,\n            name,\n            namespace\n          });\n        }\n    }\n  }\n  finalizeSubselector();\n  return selectorIndex;\n}","map":{"version":3,"names":["SelectorType","AttributeAction","reName","reEscape","actionTypes","Map","Element","Start","End","Any","Not","Hyphen","unpackPseudos","Set","isTraversal","selector","type","Adjacent","Child","Descendant","Parent","Sibling","ColumnCombinator","stripQuotesFromPseudos","funescape","_","escaped","escapedWhitespace","high","parseInt","String","fromCharCode","unescapeCSS","str","replace","isQuote","c","isWhitespace","parse","subselects","endIndex","parseSelector","concat","length","Error","slice","selectorIndex","tokens","getName","offset","match","name","stripWhitespace","charCodeAt","readValueWithParenthesis","start","counter","isEscaped","pos","slashCount","ensureNotTraversal","addTraversal","push","addSpecialAttribute","action","Attribute","value","namespace","ignoreCase","finalizeSubselector","pop","loop","firstChar","Equals","startsWith","Exists","possibleAction","get","quote","sectionEnd","valueStart","forceIgnore","attributeSelector","PseudoElement","toLowerCase","data","has","quot","Pseudo","indexOf","test","Universal","Tag"],"sources":["C:/Users/moral/Desktop/Capstone Project JAR/JAR/node_modules/css-what/lib/es/parse.js"],"sourcesContent":["import { SelectorType, AttributeAction, } from \"./types\";\nconst reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nconst reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nconst actionTypes = new Map([\n    [126 /* Tilde */, AttributeAction.Element],\n    [94 /* Circumflex */, AttributeAction.Start],\n    [36 /* Dollar */, AttributeAction.End],\n    [42 /* Asterisk */, AttributeAction.Any],\n    [33 /* ExclamationMark */, AttributeAction.Not],\n    [124 /* Pipe */, AttributeAction.Hyphen],\n]);\n// Pseudos, whose data property is parsed as well.\nconst unpackPseudos = new Set([\n    \"has\",\n    \"not\",\n    \"matches\",\n    \"is\",\n    \"where\",\n    \"host\",\n    \"host-context\",\n]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */\nexport function isTraversal(selector) {\n    switch (selector.type) {\n        case SelectorType.Adjacent:\n        case SelectorType.Child:\n        case SelectorType.Descendant:\n        case SelectorType.Parent:\n        case SelectorType.Sibling:\n        case SelectorType.ColumnCombinator:\n            return true;\n        default:\n            return false;\n    }\n}\nconst stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    const high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace\n        ? escaped\n        : high < 0\n            ? // BMP codepoint\n                String.fromCharCode(high + 0x10000)\n            : // Supplemental Plane codepoint (surrogate pair)\n                String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isQuote(c) {\n    return c === 39 /* SingleQuote */ || c === 34 /* DoubleQuote */;\n}\nfunction isWhitespace(c) {\n    return (c === 32 /* Space */ ||\n        c === 9 /* Tab */ ||\n        c === 10 /* NewLine */ ||\n        c === 12 /* FormFeed */ ||\n        c === 13 /* CarriageReturn */);\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */\nexport function parse(selector) {\n    const subselects = [];\n    const endIndex = parseSelector(subselects, `${selector}`, 0);\n    if (endIndex < selector.length) {\n        throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);\n    }\n    return subselects;\n}\nfunction parseSelector(subselects, selector, selectorIndex) {\n    let tokens = [];\n    function getName(offset) {\n        const match = selector.slice(selectorIndex + offset).match(reName);\n        if (!match) {\n            throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);\n        }\n        const [name] = match;\n        selectorIndex += offset + name.length;\n        return unescapeCSS(name);\n    }\n    function stripWhitespace(offset) {\n        selectorIndex += offset;\n        while (selectorIndex < selector.length &&\n            isWhitespace(selector.charCodeAt(selectorIndex))) {\n            selectorIndex++;\n        }\n    }\n    function readValueWithParenthesis() {\n        selectorIndex += 1;\n        const start = selectorIndex;\n        let counter = 1;\n        for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {\n            if (selector.charCodeAt(selectorIndex) ===\n                40 /* LeftParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter++;\n            }\n            else if (selector.charCodeAt(selectorIndex) ===\n                41 /* RightParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter--;\n            }\n        }\n        if (counter) {\n            throw new Error(\"Parenthesis not matched\");\n        }\n        return unescapeCSS(selector.slice(start, selectorIndex - 1));\n    }\n    function isEscaped(pos) {\n        let slashCount = 0;\n        while (selector.charCodeAt(--pos) === 92 /* BackSlash */)\n            slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    function ensureNotTraversal() {\n        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n            throw new Error(\"Did not expect successive traversals.\");\n        }\n    }\n    function addTraversal(type) {\n        if (tokens.length > 0 &&\n            tokens[tokens.length - 1].type === SelectorType.Descendant) {\n            tokens[tokens.length - 1].type = type;\n            return;\n        }\n        ensureNotTraversal();\n        tokens.push({ type });\n    }\n    function addSpecialAttribute(name, action) {\n        tokens.push({\n            type: SelectorType.Attribute,\n            name,\n            action,\n            value: getName(1),\n            namespace: null,\n            ignoreCase: \"quirks\",\n        });\n    }\n    /**\n     * We have finished parsing the current part of the selector.\n     *\n     * Remove descendant tokens at the end if they exist,\n     * and return the last index, so that parsing can be\n     * picked up from here.\n     */\n    function finalizeSubselector() {\n        if (tokens.length &&\n            tokens[tokens.length - 1].type === SelectorType.Descendant) {\n            tokens.pop();\n        }\n        if (tokens.length === 0) {\n            throw new Error(\"Empty sub-selector\");\n        }\n        subselects.push(tokens);\n    }\n    stripWhitespace(0);\n    if (selector.length === selectorIndex) {\n        return selectorIndex;\n    }\n    loop: while (selectorIndex < selector.length) {\n        const firstChar = selector.charCodeAt(selectorIndex);\n        switch (firstChar) {\n            // Whitespace\n            case 32 /* Space */:\n            case 9 /* Tab */:\n            case 10 /* NewLine */:\n            case 12 /* FormFeed */:\n            case 13 /* CarriageReturn */: {\n                if (tokens.length === 0 ||\n                    tokens[0].type !== SelectorType.Descendant) {\n                    ensureNotTraversal();\n                    tokens.push({ type: SelectorType.Descendant });\n                }\n                stripWhitespace(1);\n                break;\n            }\n            // Traversals\n            case 62 /* GreaterThan */: {\n                addTraversal(SelectorType.Child);\n                stripWhitespace(1);\n                break;\n            }\n            case 60 /* LessThan */: {\n                addTraversal(SelectorType.Parent);\n                stripWhitespace(1);\n                break;\n            }\n            case 126 /* Tilde */: {\n                addTraversal(SelectorType.Sibling);\n                stripWhitespace(1);\n                break;\n            }\n            case 43 /* Plus */: {\n                addTraversal(SelectorType.Adjacent);\n                stripWhitespace(1);\n                break;\n            }\n            // Special attribute selectors: .class, #id\n            case 46 /* Period */: {\n                addSpecialAttribute(\"class\", AttributeAction.Element);\n                break;\n            }\n            case 35 /* Hash */: {\n                addSpecialAttribute(\"id\", AttributeAction.Equals);\n                break;\n            }\n            case 91 /* LeftSquareBracket */: {\n                stripWhitespace(1);\n                // Determine attribute name and namespace\n                let name;\n                let namespace = null;\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */) {\n                    // Equivalent to no namespace\n                    name = getName(1);\n                }\n                else if (selector.startsWith(\"*|\", selectorIndex)) {\n                    namespace = \"*\";\n                    name = getName(2);\n                }\n                else {\n                    name = getName(0);\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                        selector.charCodeAt(selectorIndex + 1) !==\n                            61 /* Equal */) {\n                        namespace = name;\n                        name = getName(1);\n                    }\n                }\n                stripWhitespace(0);\n                // Determine comparison operation\n                let action = AttributeAction.Exists;\n                const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n                if (possibleAction) {\n                    action = possibleAction;\n                    if (selector.charCodeAt(selectorIndex + 1) !==\n                        61 /* Equal */) {\n                        throw new Error(\"Expected `=`\");\n                    }\n                    stripWhitespace(2);\n                }\n                else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */) {\n                    action = AttributeAction.Equals;\n                    stripWhitespace(1);\n                }\n                // Determine value\n                let value = \"\";\n                let ignoreCase = null;\n                if (action !== \"exists\") {\n                    if (isQuote(selector.charCodeAt(selectorIndex))) {\n                        const quote = selector.charCodeAt(selectorIndex);\n                        let sectionEnd = selectorIndex + 1;\n                        while (sectionEnd < selector.length &&\n                            (selector.charCodeAt(sectionEnd) !== quote ||\n                                isEscaped(sectionEnd))) {\n                            sectionEnd += 1;\n                        }\n                        if (selector.charCodeAt(sectionEnd) !== quote) {\n                            throw new Error(\"Attribute value didn't end\");\n                        }\n                        value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n                        selectorIndex = sectionEnd + 1;\n                    }\n                    else {\n                        const valueStart = selectorIndex;\n                        while (selectorIndex < selector.length &&\n                            ((!isWhitespace(selector.charCodeAt(selectorIndex)) &&\n                                selector.charCodeAt(selectorIndex) !==\n                                    93 /* RightSquareBracket */) ||\n                                isEscaped(selectorIndex))) {\n                            selectorIndex += 1;\n                        }\n                        value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n                    }\n                    stripWhitespace(0);\n                    // See if we have a force ignore flag\n                    const forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;\n                    // If the forceIgnore flag is set (either `i` or `s`), use that value\n                    if (forceIgnore === 115 /* LowerS */) {\n                        ignoreCase = false;\n                        stripWhitespace(1);\n                    }\n                    else if (forceIgnore === 105 /* LowerI */) {\n                        ignoreCase = true;\n                        stripWhitespace(1);\n                    }\n                }\n                if (selector.charCodeAt(selectorIndex) !==\n                    93 /* RightSquareBracket */) {\n                    throw new Error(\"Attribute selector didn't terminate\");\n                }\n                selectorIndex += 1;\n                const attributeSelector = {\n                    type: SelectorType.Attribute,\n                    name,\n                    action,\n                    value,\n                    namespace,\n                    ignoreCase,\n                };\n                tokens.push(attributeSelector);\n                break;\n            }\n            case 58 /* Colon */: {\n                if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */) {\n                    tokens.push({\n                        type: SelectorType.PseudoElement,\n                        name: getName(2).toLowerCase(),\n                        data: selector.charCodeAt(selectorIndex) ===\n                            40 /* LeftParenthesis */\n                            ? readValueWithParenthesis()\n                            : null,\n                    });\n                    continue;\n                }\n                const name = getName(1).toLowerCase();\n                let data = null;\n                if (selector.charCodeAt(selectorIndex) ===\n                    40 /* LeftParenthesis */) {\n                    if (unpackPseudos.has(name)) {\n                        if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                            throw new Error(`Pseudo-selector ${name} cannot be quoted`);\n                        }\n                        data = [];\n                        selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n                        if (selector.charCodeAt(selectorIndex) !==\n                            41 /* RightParenthesis */) {\n                            throw new Error(`Missing closing parenthesis in :${name} (${selector})`);\n                        }\n                        selectorIndex += 1;\n                    }\n                    else {\n                        data = readValueWithParenthesis();\n                        if (stripQuotesFromPseudos.has(name)) {\n                            const quot = data.charCodeAt(0);\n                            if (quot === data.charCodeAt(data.length - 1) &&\n                                isQuote(quot)) {\n                                data = data.slice(1, -1);\n                            }\n                        }\n                        data = unescapeCSS(data);\n                    }\n                }\n                tokens.push({ type: SelectorType.Pseudo, name, data });\n                break;\n            }\n            case 44 /* Comma */: {\n                finalizeSubselector();\n                tokens = [];\n                stripWhitespace(1);\n                break;\n            }\n            default: {\n                if (selector.startsWith(\"/*\", selectorIndex)) {\n                    const endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n                    if (endIndex < 0) {\n                        throw new Error(\"Comment was not terminated\");\n                    }\n                    selectorIndex = endIndex + 2;\n                    // Remove leading whitespace\n                    if (tokens.length === 0) {\n                        stripWhitespace(0);\n                    }\n                    break;\n                }\n                let namespace = null;\n                let name;\n                if (firstChar === 42 /* Asterisk */) {\n                    selectorIndex += 1;\n                    name = \"*\";\n                }\n                else if (firstChar === 124 /* Pipe */) {\n                    name = \"\";\n                    if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */) {\n                        addTraversal(SelectorType.ColumnCombinator);\n                        stripWhitespace(2);\n                        break;\n                    }\n                }\n                else if (reName.test(selector.slice(selectorIndex))) {\n                    name = getName(0);\n                }\n                else {\n                    break loop;\n                }\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                    selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */) {\n                    namespace = name;\n                    if (selector.charCodeAt(selectorIndex + 1) ===\n                        42 /* Asterisk */) {\n                        name = \"*\";\n                        selectorIndex += 2;\n                    }\n                    else {\n                        name = getName(1);\n                    }\n                }\n                tokens.push(name === \"*\"\n                    ? { type: SelectorType.Universal, namespace }\n                    : { type: SelectorType.Tag, name, namespace });\n            }\n        }\n    }\n    finalizeSubselector();\n    return selectorIndex;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"export const createImage = url => new Promise((resolve, reject) => {\n  const image = new Image();\n  image.addEventListener(\"load\", () => resolve(image));\n  image.addEventListener(\"error\", error => reject(error));\n  image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n  image.src = url;\n});\nexport function getRadianAngle(degreeValue) {\n  return degreeValue * Math.PI / 180;\n}\n\n/**\r\n * Returns the new bounding area of a rotated rectangle.\r\n */\nexport function rotateSize(width, height, rotation) {\n  const rotRad = getRadianAngle(rotation);\n  return {\n    width: Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height: Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height)\n  };\n}\n\n/**\r\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\r\n */\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0, flip = {\n  horizontal: false,\n  vertical: false\n}) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) {\n    return null;\n  }\n  const rotRad = getRadianAngle(rotation);\n\n  // calculate bounding box of the rotated image\n  const {\n    width: bBoxWidth,\n    height: bBoxHeight\n  } = rotateSize(image.width, image.height, rotation);\n\n  // set canvas size to match the bounding box\n  canvas.width = bBoxWidth;\n  canvas.height = bBoxHeight;\n\n  // translate canvas context to a central location to allow rotating and flipping around the center\n  ctx.translate(bBoxWidth / 2, bBoxHeight / 2);\n  ctx.rotate(rotRad);\n  ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1);\n  ctx.translate(-image.width / 2, -image.height / 2);\n\n  // draw rotated image\n  ctx.drawImage(image, 0, 0);\n\n  // croppedAreaPixels values are bounding box relative\n  // extract the cropped image using these values\n  const data = ctx.getImageData(pixelCrop.x, pixelCrop.y, pixelCrop.width, pixelCrop.height);\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  // paste generated rotate image at the top left corner\n  ctx.putImageData(data, 0, 0);\n\n  // As Base64 string\n  // return canvas.toDataURL('image/jpeg');\n\n  // As a blob\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(file => {\n      resolve({\n        url: URL.createObjectURL(file),\n        file: file\n      });\n    });\n  });\n}","map":{"version":3,"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","rotateSize","width","height","rotation","rotRad","abs","cos","sin","getCroppedImg","imageSrc","pixelCrop","flip","horizontal","vertical","canvas","document","createElement","ctx","getContext","bBoxWidth","bBoxHeight","translate","rotate","scale","drawImage","data","getImageData","x","y","putImageData","toBlob","file","URL","createObjectURL"],"sources":["C:/Users/moral/Desktop/Capstone Project JAR/JAR/src/components/crop/cropImage.js"],"sourcesContent":["export const createImage = (url) =>\r\n   new Promise((resolve, reject) => {\r\n      const image = new Image();\r\n      image.addEventListener(\"load\", () => resolve(image));\r\n      image.addEventListener(\"error\", (error) => reject(error));\r\n      image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\r\n      image.src = url;\r\n   });\r\n\r\nexport function getRadianAngle(degreeValue) {\r\n   return (degreeValue * Math.PI) / 180;\r\n}\r\n\r\n/**\r\n * Returns the new bounding area of a rotated rectangle.\r\n */\r\nexport function rotateSize(width, height, rotation) {\r\n   const rotRad = getRadianAngle(rotation);\r\n\r\n   return {\r\n      width:\r\n         Math.abs(Math.cos(rotRad) * width) +\r\n         Math.abs(Math.sin(rotRad) * height),\r\n      height:\r\n         Math.abs(Math.sin(rotRad) * width) +\r\n         Math.abs(Math.cos(rotRad) * height),\r\n   };\r\n}\r\n\r\n/**\r\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\r\n */\r\nexport default async function getCroppedImg(\r\n   imageSrc,\r\n   pixelCrop,\r\n   rotation = 0,\r\n   flip = { horizontal: false, vertical: false }\r\n) {\r\n   const image = await createImage(imageSrc);\r\n   const canvas = document.createElement(\"canvas\");\r\n   const ctx = canvas.getContext(\"2d\");\r\n\r\n   if (!ctx) {\r\n      return null;\r\n   }\r\n\r\n   const rotRad = getRadianAngle(rotation);\r\n\r\n   // calculate bounding box of the rotated image\r\n   const { width: bBoxWidth, height: bBoxHeight } = rotateSize(\r\n      image.width,\r\n      image.height,\r\n      rotation\r\n   );\r\n\r\n   // set canvas size to match the bounding box\r\n   canvas.width = bBoxWidth;\r\n   canvas.height = bBoxHeight;\r\n\r\n   // translate canvas context to a central location to allow rotating and flipping around the center\r\n   ctx.translate(bBoxWidth / 2, bBoxHeight / 2);\r\n   ctx.rotate(rotRad);\r\n   ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1);\r\n   ctx.translate(-image.width / 2, -image.height / 2);\r\n\r\n   // draw rotated image\r\n   ctx.drawImage(image, 0, 0);\r\n\r\n   // croppedAreaPixels values are bounding box relative\r\n   // extract the cropped image using these values\r\n   const data = ctx.getImageData(\r\n      pixelCrop.x,\r\n      pixelCrop.y,\r\n      pixelCrop.width,\r\n      pixelCrop.height\r\n   );\r\n\r\n   // set canvas width to final desired crop size - this will clear existing context\r\n   canvas.width = pixelCrop.width;\r\n   canvas.height = pixelCrop.height;\r\n\r\n   // paste generated rotate image at the top left corner\r\n   ctx.putImageData(data, 0, 0);\r\n\r\n   // As Base64 string\r\n   // return canvas.toDataURL('image/jpeg');\r\n\r\n   // As a blob\r\n   return new Promise((resolve, reject) => {\r\n      canvas.toBlob((file) => {\r\n         resolve({ url: URL.createObjectURL(file), file: file });\r\n      });\r\n   });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}